# Estrutura do Projeto - Tech Challenge Fase 3 - FIAP - 4MLET

Este documento descreve a estrutura de diretórios e arquivos do projeto de Previsão de Próximos Casos de Uso em Sistemas Corporativos.

## Estrutura de Diretórios

/
├── api/                        # API para previsões usando o modelo treinado
│   └── principal.py           # Implementação da API FastAPI para previsões
│
├── dados/                     # Dados do projeto
│   ├── brutos/               # Dados brutos extraídos do sistema
│   │   ├── Dados_TechChallenge_Fase3_bruto.csv    # Dados brutos em CSV
│   │   └── ObterLogsSistema.cs                     # Script C# para extração
│   └── processados/          # Dados após processamento
│       └── Dados_TechChallenge_Fase3.csv          # Dados limpos e processados
│
├── fase3_fiap_4mlet/         # Pacote principal do projeto
│   ├── __init__.py          # Inicializador do pacote
│   ├── modelo_para_uso.py   # Classe para uso do modelo em produção
│   └── treino.py           # Scripts de treinamento dos modelos
│
├── inferencia/              # Aplicação web para simulação do sistema
│   ├── app.py             # Servidor FastAPI para a interface web
│   ├── static/           # Arquivos estáticos da aplicação web
│   │   ├── script.js    # JavaScript para interatividade
│   │   └── style.css   # Estilos CSS da interface
│   └── templates/      # Templates HTML
│       └── index.html # Página principal da aplicação
│
├── modelos/           # Modelos treinados e artefatos
│   ├── modelo-dense.keras     # Modelo Dense treinado
│   ├── modelo-lstm.keras      # Modelo LSTM treinado
│   ├── ohe_x-dense.pkl       # One-Hot Encoder para features (Dense)
│   ├── ohe_x-lstm.pkl        # One-Hot Encoder para features (LSTM)
│   ├── ohe_y-dense.pkl       # One-Hot Encoder para labels (Dense)
│   ├── ohe_y-lstm.pkl        # One-Hot Encoder para labels (LSTM)
│   ├── scaler_epoca-dense.pkl # Scaler para época (Dense)
│   ├── scaler_epoca-lstm.pkl  # Scaler para época (LSTM)
│   ├── scaler_seq-dense.pkl   # Scaler para sequências (Dense)
│   └── scaler_seq-lstm.pkl    # Scaler para sequências (LSTM)
│
├── notebooks/                  # Jupyter notebooks para análise
│   ├── analise_usuarios.ipynb # Análise do comportamento dos usuários
│   └── treino_modelos.ipynb   # Desenvolvimento e treino dos modelos
│
├── requirements.txt           # Dependências do projeto
├── README.md                 # Documentação principal do projeto
└── ESTRUTURA_PROJETO.txt     # Este arquivo

## Descrição dos Componentes Principais

1. API (api/)
   - Implementa a interface REST para fazer previsões usando o modelo treinado
   - Utiliza FastAPI para expor endpoints de previsão

2. Dados (dados/)
   - Contém tanto os dados brutos quanto os processados
   - Inclui o script C# usado para extrair dados do sistema corporativo

3. Pacote Principal (fase3_fiap_4mlet/)
   - Contém a lógica central do projeto
   - Implementa classes para treinamento e uso do modelo em produção

4. Interface Web (inferencia/)
   - Simula o sistema corporativo consumindo a API
   - Interface interativa para demonstrar o funcionamento do modelo
   - Permite selecionar casos de uso e visualizar previsões

5. Modelos (modelos/)
   - Armazena os modelos treinados (Dense e LSTM)
   - Inclui artefatos necessários para pré-processamento

6. Notebooks (notebooks/)
   - Contém análises exploratórias
   - Documenta o processo de desenvolvimento dos modelos

## Como Executar o Projeto

1. Criar e configurar o ambiente virtual:
   ```
   python -m venv .venv              # Criar ambiente virtual
   source .venv/bin/activate         # Ativar ambiente virtual (Linux/Mac)
   .venv\Scripts\activate            # Ativar ambiente virtual (Windows)
   pip install -r requirements.txt   # Instalar dependências
   ```

2. Iniciar a API de previsões:
   ```
   uvicorn api.principal:app --reload --host 0.0.0.0 --port 8000
   ```

3. Em outro terminal, iniciar o simulador do sistema corporativo:
   ```
   uvicorn inferencia.app:app --reload --host 0.0.0.0 --port 8001
   ```

4. Acessar a interface web em:
   http://localhost:8001

5. A API estará disponível em:
   http://localhost:8000
   
